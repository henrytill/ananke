{-# LANGUAGE DeriveGeneric, FlexibleContexts, DeriveDataTypeable #-}

module Hecate.Types where

import Crypto.Random.Entropy (getEntropy)
import Control.Monad.Except
import Crypto.Error (CryptoError (..))
import Data.Aeson (ToJSON (..), FromJSON (..), genericToEncoding, defaultOptions)
import Data.Data
import Data.Text.Encoding
import Data.Time.Clock (UTCTime)
import GHC.Generics
import qualified Data.ByteString as BS
import qualified Data.ByteString.Base64 as Base64
import qualified Data.Text as T

-- | Application errors
data Error
  = Base64Decoding String
  | JsonDecoding String
  | Crypto CryptoError
  | AuthVerification String
  | Integrity String
  | FileSystem String
  deriving (Show, Eq)

-- | 'ByteString64'
newtype ByteString64 = ByteString64 { unByteString64 :: BS.ByteString }
  deriving ( Eq
           , Data
           , Generic
           , Ord
           , Read
           , Typeable
           )

toBase64 :: BS.ByteString -> T.Text
toBase64 = decodeUtf8 . Base64.encode

instance Show ByteString64 where
  show (ByteString64 bs) = T.unpack (toBase64 bs)

instance ToJSON ByteString64 where
  toJSON (ByteString64 bs) =
    toJSON (toBase64 bs)

instance FromJSON ByteString64 where
  parseJSON o =
    parseJSON o >>= either fail (pure . ByteString64) . Base64.decode . encodeUtf8

-- | A 'PlainText' represents a decrypted 'Text' value
newtype PlainText = PlainText T.Text
  deriving (Generic, Show, Eq)

instance ToJSON PlainText where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON PlainText

-- | A 'CipherText' represents a encrypted 'Text' value
newtype CipherText = CipherText ByteString64
  deriving (Generic, Show)

instance ToJSON CipherText where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON CipherText

-- | A 'MasterPassword' is used, in conjunction with a 'Salt', to generate a
-- user's 'MasterKey'
newtype MasterPassword = MasterPassword T.Text
  deriving (Generic, Show)

instance ToJSON MasterPassword where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON MasterPassword

-- | A 'MasterKey' is a user's key, which is generated by calling
-- 'generateMasterKey' with a 'MasterPassword' and a 'Salt'.
newtype MasterKey = MasterKey ByteString64
  deriving (Generic, Show, Eq)

instance ToJSON MasterKey where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON MasterKey

-- | A 'Salt' is a value that is used, in conjunction with a 'MasterPassword',
-- to generate a 'MasterKey'
newtype Salt = Salt ByteString64
  deriving (Generic, Show, Eq)

instance ToJSON Salt where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Salt

makeSalt :: MonadIO m => Int -> m Salt
makeSalt len = liftIO (getEntropy len) >>= (pure . Salt . ByteString64)

-- | An 'Auth' is a record containing a 'MasterKey' and the 'Salt' that was used
-- to generate it
data Auth = Auth
  { key  :: MasterKey
  , salt :: Salt
  } deriving (Generic, Show, Eq)

instance ToJSON Auth where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Auth

-- | A 'Nonce' is a value that is used, in conjunction with a 'MasterKey', to
-- encrypt and decrypt a given password
newtype Nonce = Nonce ByteString64
  deriving (Generic, Show)

instance ToJSON Nonce where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Nonce

makeNonce :: MonadIO m => m Nonce
makeNonce = liftIO (getEntropy 12) >>= (pure . Nonce . ByteString64)

-- | An 'AuthTag' is additional authenticated data that is used to verify the
-- integrity of a decrypted password
newtype AuthTag = AuthTag ByteString64
  deriving (Generic, Show, Eq)

instance ToJSON AuthTag where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON AuthTag

-- | A 'Description' identifies a given 'Entry'.  It could be a URI or a
-- descriptive name.
newtype Description = Description T.Text
  deriving (Generic, Show)

instance ToJSON Description where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Description

-- | An 'Identity' represents an identifying value.  It could be the username in
-- a username/password pair
newtype Identity = Identity T.Text
  deriving (Generic, Show)

instance ToJSON Identity where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Identity

-- | A 'Metadata' value contains additional info for a given 'Entry'
newtype Metadata = Metadata T.Text
  deriving (Generic, Show)

instance ToJSON Metadata where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Metadata

-- | An 'Entry' is a record that stores an encrypted piece of information and
-- it's associated information
data Entry = Entry
  { nonce       :: Nonce
  , authTag     :: AuthTag
  , timestamp   :: UTCTime
  , description :: Description
  , username    :: Maybe Identity
  , cipherText  :: CipherText
  , meta        :: Maybe Metadata
  } deriving (Generic, Show)

instance ToJSON Entry where
  toEncoding = genericToEncoding defaultOptions

instance FromJSON Entry
